#include<iostream>
#include<stdio.h>
using namespace std;
#define ll long long

inline ll readInt()                           //this function is for reading faster inputs
{                                             
       ll number = 0;
       char c = getchar_unlocked();           //getchar_unlocked takes fastest input
       while(c<'0' || c > '9')
            c = getchar_unlocked();
       while(c>='0'&&c<='9')
       {
            number = (number<<3)+(number<<1)+c-'0';
            c = getchar_unlocked();
       }
       return number;
}

void swap(ll* a, ll* b)                        
{
    //cout<<"Inside swap"<<endl;
    long long int t = *a;
    *a = *b;
    *b = t;
}

int partition (ll arr[], int low, int high)
{
    //cout<<"inside partition"<<endl;
    long long int pivot = arr[high];    // pivot
    long long int i = (low - 1);  // Index of smaller element

    for (int j = low; j <= high- 1; j++)
    {
        // If current element is smaller than or
        // equal to pivot
        if (arr[j] <= pivot)
        {
            i++;    // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

/* The main function that implements QuickSort
 arr[] --> Array to be sorted,
  low  --> Starting index,
  high  --> Ending index */
void quickSort(ll arr[], int low, int high)
{
    //cout<<"Inside qsort"<<endl;
    if (low < high)
    {
        /* pi is partitioning index, arr[p] is now
           at right place */
        int pi = partition(arr, low, high);

        // Separately sort elements before
        // partition and after partition
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main()
{
    ll t;
    t = readInt();  
    while(t--){                       //t numbers of test cases
    int n,m,cnt=0;                    //n = number of plates, m = least no.of meatballs
    ll a[7]={0},sum=0;                //array to store no.of meatballs in each plate
    n = readInt(); m = readInt();     //read input, calls readInt()

    for(int i=0;i<n;i++)
        a[i] = readInt();             //calls readInt()

    quickSort(a, 0, n-1);

    for(int i=n-1;i>=0;i--)
    {
        if(sum<m)
        {
            sum+=a[i];
            cnt++;                    //keep count of the number of plates required
        }
        else break;
    }

    if(cnt==n && m>sum)
        cout<<"-1"<<endl;
    else
        cout<<cnt<<endl;
    }
    return 0;
}
